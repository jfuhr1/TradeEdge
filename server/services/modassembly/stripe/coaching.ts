/**
 * IMPORTANT: File generated by Modular Assembly
 * WARNING!!! Ask the user before editing this file.
 */

import { stripe } from './client';
import type { Stripe } from 'stripe';
import { insertCoachingPurchase } from '../supabase/coachingPurchases';

interface CreateCoachingCheckoutParams {
  priceId: string;
  customerId: string;
  successUrl: string;
  cancelUrl: string;
  metadata: {
    userId: string;
    coachingProductId: string;
  };
}

/**
 * IMPORTANT: File generated by Modular Assembly
 * WARNING!!! Ask the user before editing this file.
 */
export async function createCoachingCheckout({
  priceId,
  customerId,
  successUrl,
  cancelUrl,
  metadata,
}: CreateCoachingCheckoutParams) {
  try {
    const params: Stripe.Checkout.SessionCreateParams = {
      mode: 'payment',
      customer: customerId,
      payment_method_types: ['card'],
      line_items: [
        {
          price: priceId,
          quantity: 1,
        },
      ],
      success_url: successUrl,
      cancel_url: cancelUrl,
      metadata: metadata,
    };

    const session = await stripe.checkout.sessions.create(params);
    return session;
  } catch (error) {
    console.error('Error creating coaching checkout session:', error);
    throw error;
  }
}

/**
 * IMPORTANT: File generated by Modular Assembly
 * WARNING!!! Ask the user before editing this file.
 */
export async function handleCoachingPurchaseCompleted(session: Stripe.Checkout.Session) {
  try {
    const { userId, coachingProductId } = session.metadata || {};
    
    if (!userId || !coachingProductId) {
      throw new Error('Missing required metadata');
    }

    // Retrieve the line items to get the price ID
    const lineItems = await stripe.checkout.sessions.listLineItems(session.id);
    const priceId = lineItems.data[0]?.price?.id;

    if (!priceId) {
      throw new Error('Could not retrieve price ID from session');
    }

    // Insert the purchase record using the new utility function
    await insertCoachingPurchase({
      userId,
      coachingProductId,
      stripePriceId: priceId,
      stripePaymentId: session.payment_intent as string,
    });

    console.log(`Recorded coaching purchase for user ${userId}`);
  } catch (error) {
    console.error('Error handling coaching purchase completed:', error);
    throw error;
  }
} 